/** *dianping.com Inc *Copyright(c)2004-2015 All Rights Reserved. */package com.dianping.merchant.service.repository.repo.loader;import com.dianping.merchant.service.repository.annotations.Handler;import com.dianping.merchant.service.repository.entity.SpiServiceProvider;import com.dianping.merchant.service.repository.handler.SpiHandler;import org.springframework.beans.BeansException;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ApplicationObjectSupport;import java.util.HashMap;import java.util.Map;/** * load provider from application context * * @author zhangjie * @version $Id: SpringBeanLoader.java, v 0.1 2015-09-29 下午3:59 zhangjie Exp $$ */public class SpringHandlerFactory extends ApplicationObjectSupport implements HandlerFactory {    private final Map<String, SpiHandler> handlerMap = new HashMap<String, SpiHandler>();    @Override    public SpiHandler loadHandler(SpiServiceProvider provider) {        if (handlerMap != null && handlerMap.containsKey(provider.getProviderName())) {            return handlerMap.get(provider.getProviderName());        }        return null;    }    @Override    protected void initApplicationContext(ApplicationContext context) throws BeansException {        super.initApplicationContext(context);        Map<String, SpiHandler> businessProcessorMap = context                .getBeansOfType(SpiHandler.class);        for (Map.Entry<String, SpiHandler> baseBizProcesEntry : businessProcessorMap                .entrySet()) {            SpiHandler handler = baseBizProcesEntry.getValue();            if (handler.getClass().isAnnotationPresent(Handler.class)) {                Handler spiHandlerAnnotation = handler.getClass().getAnnotation(Handler.class);                handlerMap.put(spiHandlerAnnotation.providerName(), handler);            }        }    }}