/** *dianping.com Inc *Copyright(c)2004-2015 All Rights Reserved. */package com.dianping.merchant.service.repository.processor;import org.springframework.stereotype.Service;import java.lang.reflect.ParameterizedType;import java.lang.reflect.Type;/** * @author zhangjie * @version $Id: AbstractMerchantProcessor.java, v 0.1 2015-11-16 下午5:45 zhangjie Exp $$ */@Servicepublic abstract class AbstractMerchantProcessor<S extends BaseReq,T extends BaseResp> implements BusinessProcessor<S,T> ,ServiceinVokeTemplate<S,T> {    @Override    public void preInvoke(RunTimeContext<S, T> context) {    }    @Override    public abstract void invoke(RunTimeContext<S, T> context);    @Override    public void postInvoke(RunTimeContext<S, T> context) {    }    @Override    public T execute(S request) {        try{            System.out.println("start");            RunTimeContext<S,T> context=new RunTimeContext<S, T>();            Class<T> clz = null;            ParameterizedType type = getParameterizedType(getClass());            context.setRequest(request);            clz = (Class<T>) type.getActualTypeArguments()[1];            T response = clz.newInstance();            context.setResponse(response);            preInvoke(context);            invoke(context);            postInvoke(context);            return context.getResponse();        }catch (Exception e){        }        return  null;    }    public static ParameterizedType getParameterizedType(Class<?> clz) {        Type type = clz.getGenericSuperclass();        if (type instanceof ParameterizedType) {            return (ParameterizedType) type;        }        return getParameterizedType(clz.getSuperclass());    }}