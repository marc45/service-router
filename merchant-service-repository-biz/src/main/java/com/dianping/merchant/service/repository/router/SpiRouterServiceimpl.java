/** *dianping.com Inc *Copyright(c)2004-2015 All Rights Reserved. */package com.dianping.merchant.service.repository.router;import com.dianping.avatar.log.AvatarLogger;import com.dianping.avatar.log.AvatarLoggerFactory;import com.dianping.merchant.service.repository.dao.SpiRouterDao;import com.dianping.merchant.service.repository.entity.SpiRouter;import com.dianping.merchant.service.repository.entity.SpiService;import com.dianping.merchant.service.repository.entity.SpiServiceProvider;import com.dianping.merchant.service.repository.enums.SpiStatusEnum;import com.dianping.merchant.service.repository.exception.SpiServiceException;import com.dianping.merchant.service.repository.repo.SpiServiceRepository;import com.dianping.merchant.service.repository.router.rule.Rule;import org.apache.commons.collections.CollectionUtils;import javax.annotation.PostConstruct;import javax.annotation.Resource;import java.util.HashMap;import java.util.List;import java.util.Map;/** * 路由选择服务实现 * * @author zhangjie * @version $Id: SpiRouterServiceimpl.java, v 0.1 2015-09-28 下午4:49 zhangjie Exp $$ */public class SpiRouterServiceimpl implements SpiRouterService {    private AvatarLogger LOGGER = AvatarLoggerFactory.getLogger(SpiRouterServiceimpl.class);    @Resource    private SpiServiceRepository repository;    @Resource    private SpiRouterDao spiRouterDao;    /**     * 规则器Map     */    private static final Map<String, Rule> ruleFactory = new HashMap<String, Rule>();    /**     * 数据库中对router的配置     */    private static final Map<Integer, SpiRouter> ruleConfig = new HashMap<Integer, SpiRouter>();    private List<Rule> ruleList;    @Override    public SpiServiceProvider select(int serviceCode, RouterContext routerCtx) {        LOGGER.info("service code ["+ serviceCode+"] router select start");        //step 1 read from DB service channels and rule for this service        SpiService serviceEntity = repository.findServcieByServcieCode(serviceCode, SpiStatusEnum.ON.getCode());        if (serviceEntity == null) {            throw new IllegalArgumentException("there is no servicecode " + serviceCode + " exist in db");        }        List<SpiServiceProvider> providers = repository.findProvidersByServiceCode(serviceCode, SpiStatusEnum.ON.getCode());        if (CollectionUtils.isEmpty(providers)) {            throw new IllegalArgumentException("there is no provider for servicecode " + serviceCode);        }        //step 2 chose rule to router        String routerName = ruleConfig.get(serviceEntity.getRouterId()).getRouterName();        SpiServiceProvider provider = ruleFactory.get(routerName).doRouter(providers, routerCtx);        LOGGER.info("service code ["+ serviceCode+"] router provider is"+provider.toString());        LOGGER.info("service code ["+ serviceCode+"] router select end");        //step return        return provider;    }    @PostConstruct    private void initRuleMap() {        try {            //init rules            if (CollectionUtils.isNotEmpty(ruleList)) {                for (Rule r : ruleList) {                    ruleFactory.put(r.getName(), r);                }            }            //find rules from config            List<SpiRouter> spiRouters = spiRouterDao.findAllRouters();            for (SpiRouter s : spiRouters) {                ruleConfig.put(s.getId(), s);            }        } catch (Exception e) {            LOGGER.info("SpiServiceException initRuleMap",e);            throw new SpiServiceException("rules not found");        }    }    public void setRuleList(List<Rule> ruleList) {        this.ruleList = ruleList;    }}